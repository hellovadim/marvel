{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/ErrorBoundary/ErrorBoundary.js","components/charSearchForm/charSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","a","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","comics","objectFit","CharInfo","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","CharSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","Helmet","decoration","display","width","height","margin","img","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/6.71ba4c66.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from \"react\";\nimport Spinner from \"../spinner/Spinner\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport \"./randomChar.scss\";\n\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst  RandomChar = () => {\n\n  const [char, setChar] = useState({});\n\n\n  const {loading, error, getCharacter, clearError} =  useMarvelService();\n\n  useEffect(() => {\n    updateChar()\n  }, [])\n\n const onCharLoaded = (char) => {\n   setChar(char) \n  };\n\n\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacter(id).then(onCharLoaded)\n  };\n\n \n    \n    const errorMessage = error ? <ErrorMessage/> : null\n    const spinner = loading ? <Spinner/> : null\n\n    const content = !(loading || error) ? <View char={char}/> : null \n\n\n    return (\n      <div className=\"randomchar\">\n        {errorMessage}\n        {spinner}\n        {content}\n        <div className=\"randomchar__static\">\n          <p className=\"randomchar__title\">\n            Random character for today!\n            <br />\n            Do you want to get to know him better?\n          </p>\n          <p className=\"randomchar__title\">Or choose another one</p>\n          <button onClick={updateChar} className=\"button button__main\">\n            <div className=\"inner\">try it</div>\n          </button>\n          <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n        </div>\n      </div>\n    );\n  }\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n  let imgStyle = {'objectFit' : 'cover'};\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n      imgStyle = {'objectFit' : 'unset'};\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default RandomChar;\n","import { useEffect, useState, useRef } from \"react\";\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport \"./charList.scss\";\n\nconst CharList = (props) => {\n\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setnewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n  \n  const {loading, error, getAllCharacters} = useMarvelService();\n\n  useEffect(() => {\n      onRequest(offset, true);\n  }, [])\n\n  const onRequest = (offset, initial) => {\n      initial ? setnewItemLoading(false) : setnewItemLoading(true);\n      getAllCharacters(offset)\n          .then(onCharListLoaded)\n  }\n\n  const onCharListLoaded = async(newCharList) => {\n      let ended = false;\n      if (newCharList.length < 9) {\n          ended = true;\n      }\n      setCharList([...charList, ...newCharList]);\n      setnewItemLoading(false);\n      setOffset(offset + 9);\n      setCharEnded(ended);\n  }\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n      itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n      itemRefs.current[id].classList.add('char__item_selected');\n      itemRefs.current[id].focus();\n  }\n\n  function renderItems (arr){\n      const items =  arr.map((item, i) => {\n          let imgStyle = {'objectFit' : 'cover'};\n          if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n              imgStyle = {'objectFit' : 'unset'};\n          }\n          \n          return (\n              <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                  <li \n                      className=\"char__item\"\n                      tabIndex={0}\n                      ref={el => itemRefs.current[i] = el}\n                      onClick={() => {\n                          props.onCharSelected(item.id);\n                          focusOnItem(i);\n                      }}\n                      onKeyPress={(e) => {\n                          if (e.key === ' ' || e.key === \"Enter\") {\n                              props.onCharSelected(item.id);\n                              focusOnItem(i);\n                          }\n                      }}>\n                          <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                          <div className=\"char__name\">{item.name}</div>\n                  </li>\n              </CSSTransition>\n          )\n      });\n\n      return (\n          <ul className=\"char__grid\">\n              <TransitionGroup component={null}>\n                  {items}\n              </TransitionGroup>\n          </ul>\n      )\n  }\n  \n  const items = renderItems(charList);\n\n  const errorMessage = error ? <ErrorMessage/> : null;\n  const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n  return (\n      <div className=\"char__list\">\n          {errorMessage}\n          {spinner}\n          {items}\n          <button \n              disabled={newItemLoading} \n              style={{'display' : charEnded ? 'none' : 'block'}}\n              className=\"button button__main button__long\"\n              onClick={() => onRequest(offset)}>\n              <div className=\"inner\">load more</div>\n          </button>\n      </div>\n  )\n}\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from \"react\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = ({ charId }) => {\n  const [char, setChar] = useState(null);\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [charId]);\n  const updateChar = () => {\n    clearError();\n    if (!charId) {\n      return;\n    }\n\n    getCharacter(charId).then(onCharLoaded);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  );\n};\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, i) => {\n          // eslint-disable-next-line\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default CharInfo;\n","import {Component} from 'react'\r\nimport ErrorMessage from '../errorMessage/ErrorMessage'\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo)\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n        return this.props.children;\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./charSearchForm.scss\";\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name).then(onCharLoaded);\r\n  };\r\n\r\n  const errorMessage = error ? (\r\n    <div className=\"char__search-critical-error\">\r\n      <ErrorMessage />\r\n    </div>\r\n  ) : null;\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">\r\n        There is! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/characters/${char[0].id}`}\r\n        className=\"button button__secondary\"\r\n      >\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: \"\",\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"This field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name=\"charName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"button button__main\"\r\n              disabled={loading}\r\n            >\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component=\"div\"\r\n            className=\"char__search-error\"\r\n            name=\"charName\"\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/charSearchForm\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setChar] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setChar(id);\r\n  };\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta \r\n            name=\"description\" \r\n            content=\"Marvel information portal\" />\r\n            <title>Marvel information portal</title>\r\n      </Helmet>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from \"./error.gif\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <img\r\n      style={{\r\n        display: \"block\",\r\n        width: \"250px\",\r\n        height: \"250px\",\r\n        objectFit: \"contain\",\r\n        margin: \"0 auto\",\r\n      }}\r\n      src={img}\r\n      alt=\"error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import { useHttp } from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n  const { loading, request, error, clearError } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  const _apiKey = \"apikey=8711f9cd6bb54bba8f15121c1ef3f2d3\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n}\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects.language || \"en-us\",\r\n      price: comics.prices.price ? `${comics.prices.price}$` : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    getCharacterByName\r\n  };\r\n};\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n        if (!response.ok) {\r\n          throw new Error(\r\n            ` Could not fetch ${url} , status ${response.status}`\r\n          );\r\n        }\r\n\r\n        const data = await response.json();\r\n        setLoading(false);\r\n        return data;\r\n      } catch (e) {\r\n        setLoading(false);\r\n        setError(e.message);\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {loading, request, error, clearError}\r\n};\r\n"],"sourceRoot":""}